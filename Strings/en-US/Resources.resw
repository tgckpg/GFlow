<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Async.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Asnychronous</value>
  </data>
  <data name="Caption.PlaceholderText" xml:space="preserve">
    <value>Caption</value>
  </data>
  <data name="CodePage.Text" xml:space="preserve">
    <value>Code page</value>
  </data>
  <data name="CodePageDesc.Text" xml:space="preserve">
    <value>Contents maybe encoded in different code pages. Setting this will make sure contents are correctly decoded to printable text for further processing.</value>
  </data>
  <data name="ContinueIf.Text" xml:space="preserve">
    <value>Continue if match with url</value>
  </data>
  <data name="DecodeHtml.Text" xml:space="preserve">
    <value>Decode Html</value>
  </data>
  <data name="DecodeHtmlDesc.Text" xml:space="preserve">
    <value>Translates Html encoded characters back to it's printing form. Such as "&amp;#x0416;" to "Ж".</value>
  </data>
  <data name="Default.PlaceholderText" xml:space="preserve">
    <value>Default value</value>
  </data>
  <data name="Delimited.Text" xml:space="preserve">
    <value>Delimited by line breaks</value>
  </data>
  <data name="DiscardUnmatched.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Discard unmatched</value>
  </data>
  <data name="Encoding.Text" xml:space="preserve">
    <value>Encoding Translation</value>
  </data>
  <data name="EntryPoint.PlaceholderText" xml:space="preserve">
    <value>Entry Point</value>
  </data>
  <data name="Extractor.Text" xml:space="preserve">
    <value>Extract Info</value>
  </data>
  <data name="FindConditions.Text" xml:space="preserve">
    <value>Find Conditions</value>
  </data>
  <data name="FirstStopSkip.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>First stop skip</value>
  </data>
  <data name="Format.PlaceholderText" xml:space="preserve">
    <value>Format</value>
  </data>
  <data name="Incoming.Text" xml:space="preserve">
    <value>Incoming</value>
  </data>
  <data name="IncomingDesc.Text" xml:space="preserve">
    <value>This procedure will take incoming messages as it's parameters.</value>
  </data>
  <data name="Key.Text" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="Label.PlaceholderText" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="ListBuilder.Text" xml:space="preserve">
    <value>List Builder</value>
  </data>
  <data name="Marker.Text" xml:space="preserve">
    <value>Marker</value>
  </data>
  <data name="OutputDefs.Text" xml:space="preserve">
    <value>Output Integration</value>
  </data>
  <data name="Param.PlaceholderText" xml:space="preserve">
    <value>Param &gt;</value>
  </data>
  <data name="ParamDefinitions.Text" xml:space="preserve">
    <value>Param Definitions</value>
  </data>
  <data name="Parameters.Text" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="ParamSourceMode.Text" xml:space="preserve">
    <value>Source mode</value>
  </data>
  <data name="ParamTmplStrDesc.Text" xml:space="preserve">
    <value>Input will be combine with this templated string and output to the next procedure.</value>
  </data>
  <data name="Pattern.PlaceholderText" xml:space="preserve">
    <value>Pattern</value>
  </data>
  <data name="Prefix.PlaceholderText" xml:space="preserve">
    <value>Prefix</value>
  </data>
  <data name="Result.Text" xml:space="preserve">
    <value>Result Integration</value>
  </data>
  <data name="Script.Text" xml:space="preserve">
    <value>Script</value>
  </data>
  <data name="StopIf.Text" xml:space="preserve">
    <value>Stop if</value>
  </data>
  <data name="SubProcs.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Sub procedures</value>
  </data>
  <data name="Sync.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Synchronous</value>
  </data>
  <data name="Test.Text" xml:space="preserve">
    <value>Test</value>
  </data>
  <data name="TrustWarning.Text" xml:space="preserve">
    <value>Unless you trust this script, please don't enter any account password or personal informations.</value>
  </data>
  <data name="UrlGenerator.Text" xml:space="preserve">
    <value>Generato Url</value>
  </data>
  <data name="UrlList.Text" xml:space="preserve">
    <value>Url List</value>
  </data>
  <data name="UrlListParamDesc.Text" xml:space="preserve">
    <value>Resources will be downloaded for each defined Urls and passed to the next procedure.</value>
  </data>
  <data name="UrlListPrefixDesc.Text" xml:space="preserve">
    <value>For all incoming / defined messages. Prefix all Urls with the following string.</value>
  </data>
  <data name="DecodeUrl.Text" xml:space="preserve">
    <value>Decode Url</value>
  </data>
  <data name="DecodeUrlDesc.Text" xml:space="preserve">
    <value>Translates Url encoded characters back to it's printing form. Such as "%D0%96" to "Ж".</value>
  </data>
</root>